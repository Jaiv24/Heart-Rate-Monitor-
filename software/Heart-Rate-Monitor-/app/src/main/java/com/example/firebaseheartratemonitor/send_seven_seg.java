package com.example.firebaseheartratemonitor;import androidx.annotation.NonNull;import androidx.annotation.RequiresApi;import androidx.appcompat.app.AppCompatActivity;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.graphics.Color;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.IBinder;import android.os.Message;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import com.github.mikephil.charting.charts.LineChart;import com.github.mikephil.charting.data.Entry;import com.github.mikephil.charting.data.LineData;import com.github.mikephil.charting.data.LineDataSet;import com.github.mikephil.charting.interfaces.datasets.ILineDataSet;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import java.lang.ref.WeakReference;import java.time.LocalTime;import java.util.ArrayList;import java.util.Set;public class send_seven_seg extends AppCompatActivity {    private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            switch (intent.getAction()) {                case UsbService.ACTION_USB_PERMISSION_GRANTED: // USB PERMISSION GRANTED                    Toast.makeText(context, "USB Ready", Toast.LENGTH_SHORT).show();                    break;                case UsbService.ACTION_USB_PERMISSION_NOT_GRANTED: // USB PERMISSION NOT GRANTED                    Toast.makeText(context, "USB Permission not granted", Toast.LENGTH_SHORT).show();                    break;                case UsbService.ACTION_NO_USB: // NO USB CONNECTED                    Toast.makeText(context, "No USB connected", Toast.LENGTH_SHORT).show();                    break;                case UsbService.ACTION_USB_DISCONNECTED: // USB DISCONNECTED                    Toast.makeText(context, "USB disconnected", Toast.LENGTH_SHORT).show();                    break;                case UsbService.ACTION_USB_NOT_SUPPORTED: // USB NOT SUPPORTED                    Toast.makeText(context, "USB device not supported", Toast.LENGTH_SHORT).show();                    break;            }        }    };    private UsbService usbService;    private MyHandler mHandler;    FirebaseDatabase db = FirebaseDatabase.getInstance();    DatabaseReference reference = db.getReference().child("HeartRate");    TextView getData;//    ArrayList<Entry> dataPoints = new ArrayList<>();    LineDataSet lineDataSet = new LineDataSet(null, null);    ArrayList<ILineDataSet> iLineDataSets= new ArrayList<>();    LineData lineData;    String heartrate, timeDate;    LineChart chart;    Button sendDataOverDisplay;    private final ServiceConnection usbConnection = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName arg0, IBinder arg1) {            usbService = ((UsbService.UsbBinder) arg1).getService();            usbService.setHandler(mHandler);        }        @Override        public void onServiceDisconnected(ComponentName arg0) {            usbService = null;        }    };    @RequiresApi(api = Build.VERSION_CODES.O)    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_send_seven_seg);        getData = findViewById(R.id.dataGetTextView);//        chart = findViewById(R.id.chart);        sendDataOverDisplay = findViewById(R.id.sendRequiredDataBtn);        reference.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                if (snapshot.hasChildren()) {                    for (DataSnapshot dataSnapshot : snapshot.getChildren()) {                        Model model = dataSnapshot.getValue(Model.class);                        heartrate = dataSnapshot.child("HeartRate").getValue().toString();                        timeDate = dataSnapshot.child("TimeDate").getValue().toString().substring(11, 15);                    }//                    LocalTime time = LocalTime.parse(timeDate);//                    showChart(dataPoints);                    getData.setText(heartrate);                }else{                    chart.clear();                    chart.invalidate();                }            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });        sendDataOverDisplay.setOnClickListener(v -> {           if (usbService != null) { // if UsbService was correctly Binded, Send data               usbService.write(heartrate.getBytes());           }        });    }    private void showChart(ArrayList<Entry> dataPoints) {        lineDataSet.setValues(dataPoints);        lineDataSet.setLabel("Heart Rate");        iLineDataSets.clear();        iLineDataSets.add(lineDataSet);        lineData = new LineData(iLineDataSets);        chart.setBackgroundColor(Color.WHITE);        chart.clear();        chart.animateX(1500);        chart.setData(lineData);        chart.invalidate();    }    @Override    public void onResume() {        super.onResume();        setFilters();  // Start listening notifications from UsbService        startService(UsbService.class, usbConnection, null); // Start UsbService(if it was not started before) and Bind it    }    @Override    public void onPause() {        super.onPause();        unregisterReceiver(mUsbReceiver);        unbindService(usbConnection);    }    private void startService(Class<?> service, ServiceConnection serviceConnection, Bundle extras) {        if (!UsbService.SERVICE_CONNECTED) {            Intent startService = new Intent(this, service);            if (extras != null && !extras.isEmpty()) {                Set<String> keys = extras.keySet();                for (String key : keys) {                    String extra = extras.getString(key);                    startService.putExtra(key, extra);                }            }            startService(startService);        }        Intent bindingIntent = new Intent(this, service);        bindService(bindingIntent, serviceConnection, Context.BIND_AUTO_CREATE);    }    private void setFilters() {        IntentFilter filter = new IntentFilter();        filter.addAction(UsbService.ACTION_USB_PERMISSION_GRANTED);        filter.addAction(UsbService.ACTION_NO_USB);        filter.addAction(UsbService.ACTION_USB_DISCONNECTED);        filter.addAction(UsbService.ACTION_USB_NOT_SUPPORTED);        filter.addAction(UsbService.ACTION_USB_PERMISSION_NOT_GRANTED);        registerReceiver(mUsbReceiver, filter);    }    /*     * This handler will be passed to UsbService. Data received from serial port is displayed through this handler     */    private static class MyHandler extends Handler {        private final WeakReference<MainActivity> mActivity;        public MyHandler(MainActivity activity) {            mActivity = new WeakReference<>(activity);        }        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case UsbService.MESSAGE_FROM_SERIAL_PORT://                    String data = (String) msg.obj;////                    mActivity.get().display.append(data);                    break;                case UsbService.CTS_CHANGE:                    Toast.makeText(mActivity.get(), "CTS_CHANGE",Toast.LENGTH_LONG).show();                    break;                case UsbService.DSR_CHANGE:                    Toast.makeText(mActivity.get(), "DSR_CHANGE",Toast.LENGTH_LONG).show();                    break;            }        }    }}